export class IDBStore{constructor(dbName='RLDB',storeName='kv',key='default'){this.dbName=dbName;this.storeName=storeName;this.key=key;this.db=null;}async _open(){if(this.db) return this.db;return new Promise((res,rej)=>{const req=indexedDB.open(this.dbName,1);req.onupgradeneeded=()=>{const db=req.result;if(!db.objectStoreNames.contains(this.storeName)) db.createObjectStore(this.storeName);};req.onsuccess=()=>res(req.result);req.onerror=()=>rej(req.error);});}async get(){const db=await this._open();return new Promise((res,rej)=>{const tx=db.transaction(this.storeName,'readonly');const st=tx.objectStore(this.storeName);const rq=st.get(this.key);rq.onsuccess=()=>res(rq.result||null);rq.onerror=()=>rej(rq.error);});}async set(val){const db=await this._open();return new Promise((res,rej)=>{const tx=db.transaction(this.storeName,'readwrite');const st=tx.objectStore(this.storeName);const rq=st.put(val,this.key);rq.onsuccess=()=>res(true);rq.onerror=()=>rej(rq.error);});}async clear(){const db=await this._open();return new Promise((res,rej)=>{const tx=db.transaction(this.storeName,'readwrite');const st=tx.objectStore(this.storeName);const rq=st.delete(this.key);rq.onsuccess=()=>res(true);rq.onerror=()=>rej(rq.error);});}}